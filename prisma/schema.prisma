// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
  DOCTOR
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole    @default(USER)
  accounts      Account[]
  bookings      Booking[]
  EventType     EventType[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Availability {
  id        Int      @id @default(autoincrement())
  userId    String
  days      Int[]
  startTime DateTime @db.Time
  endTime   DateTime @db.Time
  timeZone  String   @default("Asia/Calcutta")
}

enum BookingStatus {
  CANCELLED @map("cancelled")
  ACCEPTED  @map("accepted")
  REJECTED  @map("rejected")
  PENDING   @map("pending")
}

model Booking {
  id                 Int           @id @default(autoincrement())
  uid                String        @unique
  startTime          DateTime
  endTime            DateTime
  status             BookingStatus @default(ACCEPTED)
  title              String
  userId             String?
  user               User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  requestedUserId    String
  cancellationReason String?

  @@index([uid])
  @@index([userId])
  @@index([startTime, endTime, status])
}

model EventType {
  id        Int     @id @default(autoincrement())
  title     String
  length    Int
  slug      String
  timeZone  String?
  locations Json?
  price     Int     @default(0)
  currency  String  @default("inr")
  user      User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
}
